/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

/**
 *
 * @author Omar
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Omar
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.*;

	class HuffmanTree implements Comparable<HuffmanTree> {
	    public int frequency; // the frequency of this tree
	    public HuffmanTree(int freq) { frequency = freq; }
	 
	    // compares on the frequency
	    public int compareTo(HuffmanTree tree) {  return frequency - tree.frequency; }
	}
	 
	class HuffmanLeaf extends HuffmanTree { 
		public char value; // the character this leaf represents
	    public HuffmanLeaf(int freq, char val) {  super(freq);  value = val; }
	}
	 
	class HuffmanNode extends HuffmanTree {
	    public final HuffmanTree left, right; // subtrees
	    public HuffmanNode(HuffmanTree l, HuffmanTree r) { super(l.frequency + r.frequency);
	        left = l;  right = r;
	    }
	}
	 
	public class Huffman {
	    // input is an array of frequencies, indexed by character code
            static PrintWriter output =null;
	    public static HuffmanTree buildTree(int[] charFreqs) {
	        PriorityQueue<HuffmanTree> trees = new PriorityQueue<HuffmanTree>();
	       
	        for (int i = 0; i < charFreqs.length; i++)  if (charFreqs[i] > 0) trees.offer(new HuffmanLeaf(charFreqs[i], (char)i));
	        while (trees.size() > 1) {
	            HuffmanTree a = trees.poll();
	            HuffmanTree b = trees.poll();
	 	    trees.offer(new HuffmanNode(a, b));
	        }
	        return trees.poll();
	    }
	 
            
	    public static void printCodes(HuffmanTree tree, StringBuffer prefix,boolean on) throws FileNotFoundException {
                
                if (on) {  File tags = new File ("Cypher.txt");  output = new PrintWriter(tags); }
	        if (tree instanceof HuffmanLeaf) {
	            HuffmanLeaf leaf = (HuffmanLeaf)tree;
	            output.println(leaf.value + " " + prefix);
	        } else if (tree instanceof HuffmanNode) {
	            HuffmanNode node = (HuffmanNode)tree;
	
	            prefix.append('0');
	            printCodes(node.left, prefix,false);
	            prefix.deleteCharAt(prefix.length()-1); //backtracking
                    
	            prefix.append('1');
	            printCodes(node.right, prefix,false);
	            prefix.deleteCharAt(prefix.length()-1);
	        }
	    }
        }
